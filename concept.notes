






TODO:
    [√] Output program to file
    [√] check why weights are printing as shitty data
    [√] generateWeeklyProgresssion is adding all the day days to each week. Week1 looks like week 4 DEBUG
    [ ] perhaps use nlohmannjson as a better parsing lib
    [ ] Make the applyProgressionChanges more robust
    [ ] Make the json input less robust.  
        - can this generate a program based on a generic setting like "volume" or "peaking" rather than hardcoding in the specific exercises
    [√] REFACTOR

    Progression for sets and reps determined by starting configuration?
    3x10 -> 4x8 -> 5x6 -> 4x4 if 4 week
    5x5 -> 5x5 -> 6x4 -> 4x4 -> 6x3 -> 3x3 if 6 week

    Metrics to Consider when applying a progression:
        - Number of weeks
        - start setxrep configuration
        - exercise type
        - progression protocol
        - 

        ** should applyProgressionChanges() as a function take into account all of these metrics? **

        This could also potentially be an applcaition for a relational database












What I want to be able to do;

Take a json object and turn it into c++ objects:
Week 1:
    Day1:
        Exercise1
        Exercise2
        Exercise3
    Day2:
        Exercise1
        Exercise2
        Exercise3
    Day3:
        Exercise1
        Exercise2
        Exercise3

Some thoughts:
    [ ] I want the program creation to use a json object to make it easier for me to generate thr program.  Program class will have athlete data as members:
        - m_bestSquat, m_bestSnatch etc.
        - Program class can have metrics on athlete for modifiers (based on strength reserve)
    [ ] The size is large by using all of these classes.  This will require some though but how can the entirety of the program be encoded into a single vector?
    [ ] Accessory focus can be a selectable feature which appends accessories to the program based on focus
        - lower body hypertrophy, shoulder stability, etc.




            